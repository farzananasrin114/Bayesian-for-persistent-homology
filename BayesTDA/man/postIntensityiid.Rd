% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/postIntensityPoisson.R
\docType{class}
\name{postIntensityPoisson}
\alias{postIntensityPoisson}
\title{Posterior Intensity for persistence diagrams modeled as Poisson Point Process}
\usage{
postIntensityPoisson(prior, clutter, Dy, sigma.y, alpha)
}
\arguments{
\item{prior:}{prior density object. It is defined as a mixed Gaussian and use the class 'Wedge_Gaussian_Mixture'. 
The arguments (weights, means and sigmas) for the 'Wedge_Gaussian_Mixture' need to be predefined according to the prior knowledge.
see example for more details.}

\item{clutter:}{clutter density object. It is defined as a mixed Gaussian and use the class 'Wedge_Gaussian_Mixture'. 
These are the surprise features we encounter in the observed persistence diagrams. see example for more details.}

\item{Dy:}{list of two element numerics representing points observed in a persistence diagram. Here we consider a fixed homological feature. The coordinates (birth, death)/(birth, persistence) need to be a list of two element vectors. }

\item{sigma.y:}{positive constant. variance coefficient of the likelihood density. This represents the degree of faith on the observed PDs representing the underlying truth.}

\item{alpha:}{The probablity of a feature in the prior will be detected in the observation.}
}
\value{
The function 'postIntensityPoisson' returns posterior intensity given prior and set of observed PDs using Bayesian framework, where PDs are characterized by poisson point process.
}
\description{
This function use the Bayesian inference obtained by characterizing persistence diagrams (PDs) as Poisson point process. Posterior intensity can be computed from a prior intensity and a set of observed persistence diagrams. The inputs consists of two density functions estimated by using 'Wedge_Gaussian_Mixture' function: one is the prior intensity and another one is denoted as clutter. The prior density will be depending on the knowledge we have about the underlying truth. The observed PDs can exhibit two features. One which is believed to be associated to underlying truth and one is not anticipated by underlying truth or produce due to the noise. We call the later one surprise features. Usually these densities are considered to have mean near the birth axis as they can be formed due to noise.  
}
\details{
Required packages are TDA and mvtnorm.
}

\examples{
# sample data created from a unit circle to define prior
t = seq(from=0, to = 1, by = 0.01)
x = cos(2*pi*t)
y = sin(2*pi*t)
coord.mat = cbind(x,y)

# persistence diagram using ripsDiag of TDA package.  
circle.samp = coord.mat[sample(1:nrow(coord.mat),50),]
pd.circle = ripsDiag(circle.samp,maxscale=3,maxdimension = 1)
circle.diag = matrix(pd.circle$diagram,ncol=3)
circle.holes = matrix(circle.diag[which(circle.diag[,1]==1),],ncol=3)
# this is required if we are working on a tilted wedge
circle.tilted = cbind(circle.holes[,2],circle.holes[,3]-circle.holes[,2])
circle.df = data.frame(Birth = circle.tilted[,1], Persistence = circle.tilted[,2]) ## create the dataframe consisting of pd coordinates.

alpha = 1 
# these parameters are required to define the object clutter
clut.mean = c(0.5,0)
clut.noise = 1
clut.weight = 1
# these parameters are required to define the object prior
inf.mean = c(0.5,1.2)
inf.noise = 0.2
inf.weight = 1

 values = seq(from = 0, to = 2, by = 0.05)
 grid = expand.grid(values,values)
 
 ## next we utilize the 'Wedge_Gaussian_Mixture' class to define prior and clutter over the grid
 inf.prior = Wedge_Gaussian_Mixture(means = list(inf.mean),weights=list(inf.weight),sigmas = list(inf.noise)) # prior
 clut = Wedge_Gaussian_Mixture(means = list(clut.mean),weights = list(clut.weight),sigmas = list(clut.noise))
 inf.dens = apply(grid,1,inf.prior$evaluate)
 
 ## next we define the likelihhod from the observed pds. Here we consider a dataset from the same unit circle that is perturbed by a gaussian noise.
 
   pri = inf.prior ## defining the parameter prior in the function
   sy = 0.1 #the variance of the likelihood density function
   circle.noise = 0.01 ## the variance coefficient of noise in this dataset 
   noise = rmvnorm(nrow(coord.mat),mean = c(0,0), sigma = circle.noise*diag(2))
   coord.mat = coord.mat + noise ## gives us the dataset which we will consider as observation
   
   ## following section creates observed PD
   circle.samp = coord.mat[sample(1:nrow(coord.mat),50),]
   pd.circle = ripsDiag(circle.samp,maxscale=3,maxdimension = 1)
   circle.diag = matrix(pd.circle$diagram,ncol=3)
   circle.holes = matrix(circle.diag[which(circle.diag[,1]==1),],ncol=3)
   circle.tilted = cbind(circle.holes[,2],circle.holes[,3]-circle.holes[,2])
   circle.df = data.frame(Birth = circle.tilted[,1], Persistence = circle.tilted[,2]) 
   dy = lapply(1:nrow(circle.df),function(x){unlist(c(circle.df[x,][1],circle.df[x,][2]))}) ## creates the parameter Dy
   
   ## next we compute the posterior over the same grid
   posterior = postIntensityPoisson$new(prior = pri, Dy = dy, clutter = clut, sigma.y = sy, alpha = alpha)
   values = seq(from = 0, to = 2, by = 0.05)
   grid = expand.grid(values,values)
   intens = apply(grid,1,posterior$evaluate)
   intens = (1-alpha)*inf.dens + alpha*intens ## compute posterior intensity
   post.df = data.frame(Birth = grid[,1],Persistence = grid[,2], Intensity = intens)
   
   ##plot the posterior intensity
   ## require(gplot2)
   g.post = ggplot(data = post.df, aes(x = Birth, y = Persistence)) + geom_tile(aes(fill=Intensity)) + coord_equal()
   g.post = g.post + geom_point(data = circle.df, aes(x = Birth, y= Persistence), pch = 19, cex=3, color = "Green")
   g.post = g.post+ labs(title='Posterior',x='Birth',y='Persistence', fill = "") + theme_grey(base_size=14) +  theme(plot.title = element_text(hjust = 0.5))
   print(g.post)
}
\references{
Bayesian Inference for Persistent Homology, V Maroulas, F Nasrin, C Oballe, \url{https://arxiv.org/abs/1901.02034}
}
